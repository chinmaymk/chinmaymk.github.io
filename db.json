{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":false},{"_id":"themes/apollo/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/apollo/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/apollo/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"source/favicon.png","path":"favicon.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1408434970000},{"_id":"scaffolds/page.md","mtime":1408434970000},{"_id":"scaffolds/photo.md","mtime":1408434970000},{"_id":"scaffolds/post.md","mtime":1408434970000},{"_id":"source/_posts/a-thousand-thoughts.md","mtime":1390228892000},{"_id":"source/_posts/beauty-of-closure-in-javascript.md","mtime":1390228892000},{"_id":"source/_posts/api-first-development.md","mtime":1390228892000},{"_id":"source/_posts/blogger-to-octopress.md","mtime":1408772723000},{"_id":"source/_posts/companions-for-phonegap.md","mtime":1390228892000},{"_id":"source/_posts/life-cycle-of-javascript-adaption.md","mtime":1390228892000},{"_id":"source/_posts/soa-and-life.md","mtime":1390228892000},{"_id":"source/_posts/where-puck-is-going-to-be.md","mtime":1390228892000},{"_id":"themes/landscape/Gruntfile.js","mtime":1408434970000},{"_id":"themes/landscape/LICENSE","mtime":1408434970000},{"_id":"themes/landscape/README.md","mtime":1408434970000},{"_id":"themes/landscape/_config.yml","mtime":1408434970000},{"_id":"themes/landscape/package.json","mtime":1408434970000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1408434970000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1408434970000},{"_id":"themes/landscape/layout/category.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/index.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/page.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/post.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1408434970000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1408434970000},{"_id":"themes/landscape/source/js/script.js","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1408434970000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1408434970000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/style.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1408434970000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1408434970000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1408434970000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1408434970000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1408434970000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1408434970000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1408434970000},{"_id":"themes/apollo/README.md","mtime":1408435108000},{"_id":"themes/apollo/_config.yml","mtime":1408773624000},{"_id":"themes/apollo/scripts/fancybox.js","mtime":1408435108000},{"_id":"themes/apollo/layout/archive.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/category.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/index.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/layout.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/page.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/post.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/tag.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/after-footer.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/archive.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/article.ejs","mtime":1413767928000},{"_id":"themes/apollo/layout/_partial/footer.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/google-analytics.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/head.ejs","mtime":1408837507000},{"_id":"themes/apollo/layout/_partial/header.ejs","mtime":1413671471000},{"_id":"themes/apollo/layout/_partial/post/category.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/post/date.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/post/gallery.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/post/nav.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/post/tag.ejs","mtime":1408435108000},{"_id":"themes/apollo/layout/_partial/post/title.ejs","mtime":1408435108000},{"_id":"themes/apollo/source/images/icon-reorder@2x.png","mtime":1408435109000},{"_id":"themes/apollo/source/js/script.js","mtime":1408435109000},{"_id":"themes/apollo/source/css/style.styl","mtime":1413768609000},{"_id":"themes/apollo/source/css/_bass/bass.styl","mtime":1408435108000},{"_id":"themes/apollo/source/css/_bass/syntax.styl","mtime":1408435108000},{"_id":"themes/apollo/source/css/_bass/variables.styl","mtime":1413769957000},{"_id":"themes/apollo/source/css/_partial/archive.styl","mtime":1408435108000},{"_id":"themes/apollo/source/css/_partial/article-gallery.styl","mtime":1408435108000},{"_id":"themes/apollo/source/css/_partial/article-nav.styl","mtime":1412989110000},{"_id":"themes/apollo/source/css/_partial/article.styl","mtime":1413768583000},{"_id":"themes/apollo/source/css/_partial/footer.styl","mtime":1408435108000},{"_id":"themes/apollo/source/css/_partial/header.styl","mtime":1413768637000},{"_id":"themes/apollo/source/css/_partial/rwd.styl","mtime":1413767770000},{"_id":"themes/apollo/source/css/fonts/FontAwesome.otf","mtime":1408435108000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.eot","mtime":1408435108000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.svg","mtime":1408435108000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.ttf","mtime":1408435108000},{"_id":"themes/apollo/source/css/fonts/fontawesome-webfont.woff","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/blank.gif","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/fancybox_loading.gif","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/fancybox_loading@2x.gif","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/fancybox_overlay.png","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite.png","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/fancybox_sprite@2x.png","mtime":1408435108000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.css","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.js","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/jquery.fancybox.pack.js","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/fancybox_buttons.png","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1408435109000},{"_id":"themes/apollo/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1408435109000},{"_id":"source/CNAME","mtime":1408435357000},{"_id":"source/_posts/arbitrary-reasons.md","mtime":1409427262000},{"_id":"source/favicon.png","mtime":1408772088000},{"_id":"source/_posts/herds-on-a-mountain-slope.md","mtime":1408992569000},{"_id":"source/_posts/adapting-to-changes.md","mtime":1409427463000},{"_id":"source/_posts/Passion-and-pragmatism.md","mtime":1413574298000},{"_id":"source/_posts/Getting-started-with-machine-learning.md","mtime":1413770411000},{"_id":"source/_posts/Moving-from-python-to-R.md","mtime":1415902411000}],"Category":[{"name":"API, REST, MVC","_id":"vf2jinn6cq2zel2x","posts":["qfvfr4eel82reobx"]},{"name":"blogger, blogspot, octopress, migration","_id":"rtt4ddht61nfcz1s","posts":["j8ewqbsqm7xw90qi"]},{"name":"javascript","_id":"fdg7s9k53q23ni2p","posts":["yfiz74066xwr6dlu","c3a4sgeknuk64khp","n5sozhigd09a11vs"]},{"name":"build phonegap","parent":"fdg7s9k53q23ni2p","_id":"vwyj636a1xtx5rag","posts":["yfiz74066xwr6dlu"]},{"name":"phonegap","parent":"vwyj636a1xtx5rag","_id":"2ytvq3w1zmyiyca8","posts":["yfiz74066xwr6dlu"]},{"name":"learning javascript","parent":"fdg7s9k53q23ni2p","_id":"i6u7no5ifszxj1t0","posts":["c3a4sgeknuk64khp"]},{"name":"Service oriented architecture","_id":"d960uksxvbjyw1or","posts":["jsocyr7oxj2i98v9"]},{"name":"SOA","parent":"d960uksxvbjyw1or","_id":"ngxxn6yi0fqmtu8g","posts":["jsocyr7oxj2i98v9"]},{"name":"software","_id":"ywirm7crf56xoecd","posts":["4inmnhy33n1hus8x"]},{"name":"innovation","parent":"ywirm7crf56xoecd","_id":"n77iidqzbdepdawg","posts":["4inmnhy33n1hus8x"]},{"name":"thoughts","_id":"flsaeeabctnbz3f1","posts":["ix373s7b747xz31p"]},{"name":"thougthprocess","parent":"flsaeeabctnbz3f1","_id":"6ue6moqj875jand0","posts":["ix373s7b747xz31p"]},{"name":"multithreading","parent":"6ue6moqj875jand0","_id":"pdr5gbvczjlant9k","posts":["ix373s7b747xz31p"]},{"name":"closure","parent":"fdg7s9k53q23ni2p","_id":"777ifchddoa5mfnm","posts":["n5sozhigd09a11vs"]}],"Page":[],"Post":[{"layout":"post","title":"API first development","date":1388032435000,"comments":true,"categories":["vf2jinn6cq2zel2x"],"content":"<blockquote>\n<p>Change is the only constant. </p>\n</blockquote>\n<p>In today’s world, the word “computation” is being used in systems other than computers more frequently. “Internet of things” is coming along nicely. This imposes some changes in traditional concept of software.</p>\n<p>In the evolution of web application, MVC pattern was definitely a milestone. It allowed software engineers to successfully de-couple business logic from UI dependencies and it has been the defacto of writing good, robust web applications. However, with the pace of changes happening today we, as software engineers, need to re-think this model.</p>\n<h3 id=\"What’s_MVC_anyway_?\">What’s MVC anyway ?</h3>\n<p>MVC stands for model-view-controller, as the names suggest, model represents business objects in you application. View is the HTML used to interact with your application and Controller is the glue that holds these two together. If we take a bird’s eye look at this architectural pattern. We can easily think of view-layer as a client interface, which wraps up business logic and computation provided by your application. </p>\n<h3 id=\"It’s_not_just_one_view_now!\">It’s not just one view now!</h3>\n<p>Today, with increasing popularity of smart-phones and BYOD, end users prefer doing their computation from mobile devices - tables, smart-phones etc. Now, to enable users use your application via multiple platforms. It is not sufficient to design application in traditional MVC pattern. Ofcourse you can use responsive web design to share one view between many clients, but it doesn’t have that native look and feel, more importantly speed that native apps bring in picture. </p>\n<blockquote>\n<p>HTML5 is the thing of ‘future’!</p>\n</blockquote>\n<p>HTML5 might seem promising, but it’s just not there yet. Due to poor support for JavaScript heavy applications, using HTML5/client side MVC will make your application insanely slow on some devices. Second option is to make native mobile apps and call APIs from it. So ultimately we’ll end up re-implementing some of the logic.</p>\n<h3 id=\"Enter_API_first\">Enter API first</h3>\n<p>In order to solve this problem, first we need to take the view-layer out from the picture and just focus on the business logic of application. Next think about what operations user can perform with your application, could be data manipulations, or some other form of computation. Wrap this operation in a URL and you have an API! So what changed in this approach ? We focused on the logic first and not the view, doing so we de-coupled our web application one step further. Now any view can be plugged in or out very easily.</p>\n<h3 id=\"Best_practices_to_follow\">Best practices to follow</h3>\n<p>Understanding <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"external\">REST</a> principles is of utmost importance when designing APIs. There are some common considerations while following API first development. Here’s a list of few</p>\n<ol>\n<li>Keep API structure meaningful</li>\n<li>Keep APIs stateless</li>\n<li>Use HTTP verbs to fullest</li>\n<li>Document your APIs - its really important!</li>\n</ol>\n<h3 id=\"Conclusion\">Conclusion</h3>\n<p>API first development allows you to highly reuse the code, helps you implement <a href=\"http://chinmaymk.com/blog/2013/10/30/soa-and-life/\" target=\"_blank\" rel=\"external\">SOA</a>, and boost overall time required for development.</p>\n<p>Further reading </p>\n<ul>\n<li><a href=\"http://www.api-first.com/\" target=\"_blank\" rel=\"external\">http://www.api-first.com/</a></li>\n<li><a href=\"http://blog.pop.co/post/67465239611/why-we-chose-api-first-development\" target=\"_blank\" rel=\"external\">http://blog.pop.co/post/67465239611/why-we-chose-api-first-development</a></li>\n<li><a href=\"http://blog.dossot.net/2011/11/api-first-development.html\" target=\"_blank\" rel=\"external\">http://blog.dossot.net/2011/11/api-first-development.html</a></li>\n<li><a href=\"http://www.leaseweblabs.com/2013/10/api-first-architecture-fat-vs-thin-server-debate/\" target=\"_blank\" rel=\"external\">http://www.leaseweblabs.com/2013/10/api-first-architecture-fat-vs-thin-server-debate/</a></li>\n</ul>\n","source":"_posts/api-first-development.md","raw":"---\nlayout: post\ntitle: \"API first development\"\ndate: 2013-12-25 20:33:55 +0530\ncomments: true\ncategories: API, REST, MVC\n---\n\n>Change is the only constant. \n\nIn today's world, the word \"computation\" is being used in systems other than computers more frequently. \"Internet of things\" is coming along nicely. This imposes some changes in traditional concept of software.\n\nIn the evolution of web application, MVC pattern was definitely a milestone. It allowed software engineers to successfully de-couple business logic from UI dependencies and it has been the defacto of writing good, robust web applications. However, with the pace of changes happening today we, as software engineers, need to re-think this model.\n\n###What's MVC anyway ?\nMVC stands for model-view-controller, as the names suggest, model represents business objects in you application. View is the HTML used to interact with your application and Controller is the glue that holds these two together. If we take a bird's eye look at this architectural pattern. We can easily think of view-layer as a client interface, which wraps up business logic and computation provided by your application. \n\n###It's not just one view now!\nToday, with increasing popularity of smart-phones and BYOD, end users prefer doing their computation from mobile devices - tables, smart-phones etc. Now, to enable users use your application via multiple platforms. It is not sufficient to design application in traditional MVC pattern. Ofcourse you can use responsive web design to share one view between many clients, but it doesn't have that native look and feel, more importantly speed that native apps bring in picture. \n\n>HTML5 is the thing of 'future'!\n\nHTML5 might seem promising, but it's just not there yet. Due to poor support for JavaScript heavy applications, using HTML5/client side MVC will make your application insanely slow on some devices. Second option is to make native mobile apps and call APIs from it. So ultimately we'll end up re-implementing some of the logic.\n\n###Enter API first\nIn order to solve this problem, first we need to take the view-layer out from the picture and just focus on the business logic of application. Next think about what operations user can perform with your application, could be data manipulations, or some other form of computation. Wrap this operation in a URL and you have an API! So what changed in this approach ? We focused on the logic first and not the view, doing so we de-coupled our web application one step further. Now any view can be plugged in or out very easily.\n\n###Best practices to follow\nUnderstanding [REST](http://en.wikipedia.org/wiki/Representational_state_transfer) principles is of utmost importance when designing APIs. There are some common considerations while following API first development. Here's a list of few\n\n1. Keep API structure meaningful\n2. Keep APIs stateless\n3. Use HTTP verbs to fullest\n4. Document your APIs - its really important!\n\n###Conclusion\nAPI first development allows you to highly reuse the code, helps you implement [SOA](http://chinmaymk.com/blog/2013/10/30/soa-and-life/), and boost overall time required for development.\n\nFurther reading \n\n- http://www.api-first.com/\n- http://blog.pop.co/post/67465239611/why-we-chose-api-first-development\n- http://blog.dossot.net/2011/11/api-first-development.html\n- http://www.leaseweblabs.com/2013/10/api-first-architecture-fat-vs-thin-server-debate/","slug":"api-first-development","updated":1390228892000,"excerpt":"","_id":"qfvfr4eel82reobx","tags":[],"photos":[],"link":""},{"layout":"post","title":"Blogger to octopress","date":1390280371000,"comments":true,"categories":["rtt4ddht61nfcz1s"],"content":"<p>Recently I shifted my blog from blogger to octopress. In this post I’ll try and cover the reasons for this shift, and the process followed.</p>\n<h3 id=\"Blogger_world\">Blogger world</h3>\n<p>It is ridiculously easy to set up your blog with blogger. Just a few clicks and your blog is up and running. Blogger also allows you to set up a custom domain without much hastle. And ofcourse with google backing it up, blogger has awesome support for SEO and analytics through google analytics.</p>\n<h3 id=\"Running_into_problems_with_blogger\">Running into problems with blogger</h3>\n<p>Blogger is simple and fun to get started with, but whenever you want do something out of the line, like embed a piece of code in your blog, it becomes insanely difficult. Many of the folks who write blogs started from blogger and then moved on to more sophisticated platforms such as wordpress. For me, blogger was working fine but there were some really annoying issues. These are the primary ones:</p>\n<ol>\n<li>No markdown support</li>\n<li>Getting code in your blog could be ugly</li>\n<li>WYSIWG editor is a big fat lie</li>\n<li>Very limited templates - I had to write CSS for almost everything!</li>\n<li>Doesn’t have an hacker workflow - sublime, git, markdown, cli</li>\n</ol>\n<h3 id=\"Search\">Search</h3>\n<p>Once I was fed up with blogger, I started searching for the next blogging platform. Wordpress was the first choice. With the wide variety of plugins and themes wordpress is really tempting, I even found a plugin for writing blogs in markdown with wordpress. Then I downloaded basic installtion of wordpress, and got it running with local wamp. Now the next big question was of deployment. I could setup an account on wordpress.com, but thats not something I wanted. Dependency on mysql for a blogging platform seemed far-fetched to me. Also, I ran into various issues while deploying wordpress to <a href=\"http://heroku.com\" target=\"_blank\" rel=\"external\">heroku</a>: heroku supports only PostgreSQL. It’s a bit tricky to get wordpress up and running. I also tried <a href=\"http://docpad.org/\" target=\"_blank\" rel=\"external\">DocPad</a>, <a href=\"https://ghost.org/\" target=\"_blank\" rel=\"external\">ghost</a> and <a href=\"http://zespia.tw/hexo/\" target=\"_blank\" rel=\"external\">hexo</a>. But couldn’t really relate to any of them.</p>\n<h3 id=\"Octopress\">Octopress</h3>\n<p>While working on github pages for one my open source projects, I wondered how github creates these pages from markdown ? I immediately started looking if they have put it open source. I realized github pages are powered by <a href=\"http://jekyllrb.com/\" target=\"_blank\" rel=\"external\">jekyll</a>. jekyll is nice, but you need a layer of abstraction on top of this to be productive. Then after a bit of googling, I stubled upon octopress. Which runs on jekyll and is very easy to use. More importantly, it supports the workflow I was looking for!</p>\n<h3 id=\"Getting_started_with_octopress\">Getting started with octopress</h3>\n<p>Octopress requires ruby for compiling your site into static HTML pages. I’m not ruby wizard, words like rake, nokogiri give me an headache. Octopress install <a href=\"http://octopress.org/docs/setup/\" target=\"_blank\" rel=\"external\">page</a> is fairly simple, and easy to understand. One should follow all those instructions piously. I’m serious, don’t miss out a single one, else you’ll be doomed with callstacks of ruby! </p>\n<p><strong>Gotcha:</strong> I installed ruby 2.0 x64 edition, on the site it says <strong>1.9.3 or greater</strong>. But octopress just blew up when I tried compiling it on ruby 2.0. So a word of advice, <strong>stick with 1.9.3</strong>, don’t try to get fancy if you don’t know ruby.</p>\n<h3 id=\"Porting_old_blogs_to_octopress\">Porting old blogs to octopress</h3>\n<p>First, you need to export the blogger information, it should give you an xml file. You should find this option in settings tab on the left side. <a href=\"https://gist.github.com/juniorz/1564581\" target=\"_blank\" rel=\"external\">this</a> gist has the code for converting that ugly xml to octopress friendly blog files.</p>\n<p><strong>Gotcha:</strong> This gist requires a ruby gem nokogiri (ruby-gems is the package manager for ruby). To install nokogiri you have to run</p>\n<figure class=\"highlight rb\"><pre><div class=\"line\">gem install nokogiri</div><div class=\"line\"></div><div class=\"line\">//If this doesn't work in your case try</div><div class=\"line\"></div><div class=\"line\">rb gem install nokogiri --pre</div></pre></figure>\n\n<p>I’m not sure what it does, but this worked for me!</p>\n<h3 id=\"Deploying_to_github_pages_and_adding_a_custom_domain\">Deploying to github pages and adding a custom domain</h3>\n<p>One of sweetest feature of octopress is no run time dependency. End output is just plain HTML, CSS, JS and could be deployed on any static file server. Github pages provide an excellent option, I already had a github account so I followed steps from <a href=\"http://octopress.org/docs/deploying/github/\" target=\"_blank\" rel=\"external\">this</a> link.</p>\n<p><strong>Gotcha:</strong> Deploying to <code>username.github.io</code> will mess up your project pages. Deploy to gh-pages branch of a seperate repo in case you are using github pages.</p>\n<p>Setting up a custom domain was easy once I figured out what to do. I deployed octopress to a seperate repository. So I had to add a CNAME file with my domain name in it, e.g</p>\n<figure class=\"highlight rb\"><figcaption><span>CNAME </span></figcaption><pre><div class=\"line\">chinmaymk.com</div></pre></figure>\n\n<p>Then I had to edit the DNS entry for <code>@</code> to <code>204.232.175.78</code> from my godaddy account. Note: It could take upto 48 hours to activate, in my case it kicked off within a couple of hours.</p>\n<h3 id=\"Adding_disquss_comments\">Adding disquss comments</h3>\n<p>Octopress does not have native support for comments, to get comments in your blog you have to setup an account with <a href=\"http://disqus.com/\" target=\"_blank\" rel=\"external\">disquss</a>. It will ask you a couple of questions such as what’s your domain name and site name etc. Finish those and in <code>_config.yml</code> add your <code>disquss_short_name</code>. Run <code>rake generate</code> and disquss comments should enabled.</p>\n<p><strong>Gotcha:</strong> There’s a flag in every post named <code>comments:</code> you have to set it to true.</p>\n<p>And that was it! after a whole night dedicated to get this working, I finally had octopress up and running.</p>\n","source":"_posts/blogger-to-octopress.md","raw":"---\nlayout: post\ntitle: \"Blogger to octopress\"\ndate: 2014-01-20 20:59:31 +0530\ncomments: true\ncategories: blogger, blogspot, octopress, migration\n---\n\nRecently I shifted my blog from blogger to octopress. In this post I'll try and cover the reasons for this shift, and the process followed.\n\n###Blogger world\nIt is ridiculously easy to set up your blog with blogger. Just a few clicks and your blog is up and running. Blogger also allows you to set up a custom domain without much hastle. And ofcourse with google backing it up, blogger has awesome support for SEO and analytics through google analytics.\n\n###Running into problems with blogger\nBlogger is simple and fun to get started with, but whenever you want do something out of the line, like embed a piece of code in your blog, it becomes insanely difficult. Many of the folks who write blogs started from blogger and then moved on to more sophisticated platforms such as wordpress. For me, blogger was working fine but there were some really annoying issues. These are the primary ones:\n\n1. No markdown support\n2. Getting code in your blog could be ugly\n3. WYSIWG editor is a big fat lie\n4. Very limited templates - I had to write CSS for almost everything!\n5. Doesn't have an hacker workflow - sublime, git, markdown, cli\n\n###Search\nOnce I was fed up with blogger, I started searching for the next blogging platform. Wordpress was the first choice. With the wide variety of plugins and themes wordpress is really tempting, I even found a plugin for writing blogs in markdown with wordpress. Then I downloaded basic installtion of wordpress, and got it running with local wamp. Now the next big question was of deployment. I could setup an account on wordpress.com, but thats not something I wanted. Dependency on mysql for a blogging platform seemed far-fetched to me. Also, I ran into various issues while deploying wordpress to [heroku](http://heroku.com): heroku supports only PostgreSQL. It's a bit tricky to get wordpress up and running. I also tried [DocPad](http://docpad.org/), [ghost](https://ghost.org/) and [hexo](http://zespia.tw/hexo/). But couldn't really relate to any of them.\n\n###Octopress\nWhile working on github pages for one my open source projects, I wondered how github creates these pages from markdown ? I immediately started looking if they have put it open source. I realized github pages are powered by [jekyll](http://jekyllrb.com/). jekyll is nice, but you need a layer of abstraction on top of this to be productive. Then after a bit of googling, I stubled upon octopress. Which runs on jekyll and is very easy to use. More importantly, it supports the workflow I was looking for!\n\n###Getting started with octopress\nOctopress requires ruby for compiling your site into static HTML pages. I'm not ruby wizard, words like rake, nokogiri give me an headache. Octopress install [page](http://octopress.org/docs/setup/) is fairly simple, and easy to understand. One should follow all those instructions piously. I'm serious, don't miss out a single one, else you'll be doomed with callstacks of ruby! \n\n**Gotcha:** I installed ruby 2.0 x64 edition, on the site it says **1.9.3 or greater**. But octopress just blew up when I tried compiling it on ruby 2.0. So a word of advice, **stick with 1.9.3**, don't try to get fancy if you don't know ruby.\n\n###Porting old blogs to octopress\nFirst, you need to export the blogger information, it should give you an xml file. You should find this option in settings tab on the left side. [this](https://gist.github.com/juniorz/1564581) gist has the code for converting that ugly xml to octopress friendly blog files.\n\n**Gotcha:** This gist requires a ruby gem nokogiri (ruby-gems is the package manager for ruby). To install nokogiri you have to run\n\n```rb \ngem install nokogiri\n\n//If this doesn't work in your case try\n\nrb gem install nokogiri --pre\n```\n\nI'm not sure what it does, but this worked for me!\n\n###Deploying to github pages and adding a custom domain\nOne of sweetest feature of octopress is no run time dependency. End output is just plain HTML, CSS, JS and could be deployed on any static file server. Github pages provide an excellent option, I already had a github account so I followed steps from [this](http://octopress.org/docs/deploying/github/) link.\n\n**Gotcha:** Deploying to `username.github.io` will mess up your project pages. Deploy to gh-pages branch of a seperate repo in case you are using github pages.\n\nSetting up a custom domain was easy once I figured out what to do. I deployed octopress to a seperate repository. So I had to add a CNAME file with my domain name in it, e.g\n\n```rb CNAME \nchinmaymk.com \n```\n\nThen I had to edit the DNS entry for `@` to `204.232.175.78` from my godaddy account. Note: It could take upto 48 hours to activate, in my case it kicked off within a couple of hours.\n\n###Adding disquss comments\nOctopress does not have native support for comments, to get comments in your blog you have to setup an account with [disquss](http://disqus.com/). It will ask you a couple of questions such as what's your domain name and site name etc. Finish those and in `_config.yml` add your `disquss_short_name`. Run `rake generate` and disquss comments should enabled.\n\n**Gotcha:** There's a flag in every post named `comments:` you have to set it to true.\n\nAnd that was it! after a whole night dedicated to get this working, I finally had octopress up and running.","slug":"blogger-to-octopress","updated":1408772723000,"excerpt":"","_id":"j8ewqbsqm7xw90qi","tags":[],"photos":[],"link":""},{"layout":"post","title":"Companions for phonegap","date":1380316740000,"comments":false,"categories":["fdg7s9k53q23ni2p","vwyj636a1xtx5rag","2ytvq3w1zmyiyca8"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\"><a href=\"http://phonegap.com/\" target=\"_blank\">Phonegap&nbsp;</a>has opened up a whole new way of creating mobile applications, in a nutshell it follows “write once, run anywhere” principle. There are some obvious trade-offs of using phonegap. But once you decide upon this framework, there is still some further RnD required on things like which mobile framework should I choose ? How do I build application for various platforms ? and so on. In this article, I’ll try addressing these issues.<br><br>The main problem with JavaScript world is, there are just too many options to choose from. Every other day there comes a new framework claiming it makes development far easier than others. As a result there is nothing like one framework to rule them all. So it ultimately boils down to a soup of frameworks which you have to choose. However just like any other application; JS apps can also broken down to two separate layers of UI and Logic. With this in mind we can now look at various frameworks for mobile development. </span><br><span style=\"font-family: inherit;\"><b><br></b></span><span style=\"font-family: inherit;\"><b>UI frameworks</b></span><br><span style=\"font-family: inherit;\">In case of UI, its mostly CSS magic. There are few points should be considered when looking at CSS framework.</span><br><ol><li>  <span style=\"font-family: inherit;\">Supports CSS3 transitions - CSS3 is the fastest way one can animate in browser</span></li><li>  <span style=\"font-family: inherit;\">Provides wide range of mobile controls</span></li><li>  <span style=\"font-family: inherit;\">Supports vector icons</span></li><li>  <span style=\"font-family: inherit;\">Grid support is a must</span></li><li>  <span style=\"font-family: inherit;\">Has helper classes for creating common elements such has action bar, tab navigation.</span></li><li>  <span style=\"font-family: inherit;\">Should be lightweight (in size and complexity of rules)</span></li></ol><span style=\"font-family: inherit;\">Also make sure you&nbsp;<strong>test on actual device</strong>&nbsp;before zeroing down on a framework. <strong>Device emulator in chrome doesn’t give you the real picture!</strong> In my personal experience I’ve found that many frameworks claim support for all the platforms but do not perform up to the mark when tested on actual devices. If you don’t have a device in mind, then try testing it on as many different devices as possible :)<br><br>There is a really nice website I found for comparing mobile frameworks -&nbsp;<a href=\"http://frameworkdemos.com/\" target=\"_blank\" rel=\"external\">http://frameworkdemos.com/</a></span><br><div><span style=\"font-family: inherit;\">Just open this from any mobile browser and start looking how elements are actually rendered on the device.</span></div><div style=\"text-align: center;\"></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Backend</b></span></div><div><span style=\"font-family: inherit;\">Now as for the logic part, most of the UI frameworks give you a way of listening to events. But that’s not enough when we are considering a large application. so for deciding back end logic part of your application there is another great project TodoMVC -&nbsp;<a href=\"http://todomvc.com/\" target=\"_blank\" rel=\"external\">http://todomvc.com/</a>.&nbsp;By looking at the code samples, you can get hold of how popular MV* frameworks in JavaScript actually work. Most of the frameworks in this arena are opinionated so in this case there can’t be a thumb-rule for selecting a framework. Just see if it fits your requirements!</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Building your application</b></span></div><div><span style=\"font-family: inherit;\">There is a great tool to build your application for all platforms.&nbsp;<a href=\"https://build.phonegap.com/\" target=\"_blank\" rel=\"external\">https://build.phonegap.com</a>. You can hook up this with a github repository, start the build, download apk and you’re done! Now what if you have to automate this build ? sadly, build phonegap doesn’t support that as of now, at least for the free version. but they have exposed APIs in case you want to fire a build request programmatically. For further reading use&nbsp;<a href=\"https://build.phonegap.com/api\" style=\"font-size: 12.0px;\" target=\"_blank\" rel=\"external\">https://build.phonegap.com/api</a></span><br><span style=\"font-family: inherit;\"><br>Additions are most welcome :)</span></div></div></div>\n","source":"_posts/companions-for-phonegap.md","raw":"---\nlayout: post\ntitle: \"Companions for phonegap\"\ndate: 2013-09-27T19:49:00+05:30\ncomments: false\ncategories:\n - javascript\n - build phonegap\n - phonegap\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\"><a href=\"http://phonegap.com/\" target=\"_blank\">Phonegap&nbsp;</a>has opened up a whole new way of creating mobile applications, in a nutshell it follows \"write once, run anywhere\" principle. There are some obvious trade-offs of using phonegap. But once you decide upon this framework, there is still some further RnD required on things like which mobile framework should I choose ? How do I build application for various platforms ? and so on. In this article, I'll try addressing these issues.<br /><br />The main problem with JavaScript world is, there are just too many options to choose from. Every other day there comes a new framework claiming it makes development far easier than others. As a result there is nothing like one framework to rule them all. So it ultimately boils down to a soup of frameworks which you have to choose. However just like any other application; JS apps can also broken down to two separate layers of UI and Logic. With this in mind we can now look at various frameworks for mobile development. </span><br /><span style=\"font-family: inherit;\"><b><br /></b></span><span style=\"font-family: inherit;\"><b>UI frameworks</b></span><br /><span style=\"font-family: inherit;\">In case of UI, its mostly CSS magic. There are few points should be considered when looking at CSS framework.</span><br /><ol><li>  <span style=\"font-family: inherit;\">Supports CSS3 transitions - CSS3 is the fastest way one can animate in browser</span></li><li>  <span style=\"font-family: inherit;\">Provides wide range of mobile controls</span></li><li>  <span style=\"font-family: inherit;\">Supports vector icons</span></li><li>  <span style=\"font-family: inherit;\">Grid support is a must</span></li><li>  <span style=\"font-family: inherit;\">Has helper classes for creating common elements such has action bar, tab navigation.</span></li><li>  <span style=\"font-family: inherit;\">Should be lightweight (in size and complexity of rules)</span></li></ol><span style=\"font-family: inherit;\">Also make sure you&nbsp;<strong>test on actual device</strong>&nbsp;before zeroing down on a framework. <strong>Device emulator in chrome doesn't give you the real picture!</strong> In my personal experience I've found that many frameworks claim support for all the platforms but do not perform up to the mark when tested on actual devices. If you don't have a device in mind, then try testing it on as many different devices as possible :)<br /><br />There is a really nice website I found for comparing mobile frameworks -&nbsp;<a href=\"http://frameworkdemos.com/\">http://frameworkdemos.com/</a></span><br /><div><span style=\"font-family: inherit;\">Just open this from any mobile browser and start looking how elements are actually rendered on the device.</span></div><div style=\"text-align: center;\"></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Backend</b></span></div><div><span style=\"font-family: inherit;\">Now as for the logic part, most of the UI frameworks give you a way of listening to events. But that's not enough when we are considering a large application. so for deciding back end logic part of your application there is another great project TodoMVC -&nbsp;<a href=\"http://todomvc.com/\">http://todomvc.com/</a>.&nbsp;By looking at the code samples, you can get hold of how popular MV* frameworks in JavaScript actually work. Most of the frameworks in this arena are opinionated so in this case there can't be a thumb-rule for selecting a framework. Just see if it fits your requirements!</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Building your application</b></span></div><div><span style=\"font-family: inherit;\">There is a great tool to build your application for all platforms.&nbsp;<a href=\"https://build.phonegap.com/\">https://build.phonegap.com</a>. You can hook up this with a github repository, start the build, download apk and you're done! Now what if you have to automate this build ? sadly, build phonegap doesn't support that as of now, at least for the free version. but they have exposed APIs in case you want to fire a build request programmatically. For further reading use&nbsp;<a href=\"https://build.phonegap.com/api\" style=\"font-size: 12.0px;\">https://build.phonegap.com/api</a></span><br /><span style=\"font-family: inherit;\"><br />Additions are most welcome :)</span></div></div></div>\n","slug":"companions-for-phonegap","updated":1390228892000,"excerpt":"","_id":"yfiz74066xwr6dlu","tags":[],"photos":[],"link":""},{"layout":"post","title":"Adaption of JavaScript","date":1380631380000,"comments":false,"categories":["fdg7s9k53q23ni2p","i6u7no5ifszxj1t0"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">It’s funny how people react to JavaScript, some get excited, some get terrified, while some start crying. In recent past, I’ve seen many folks arguing that JavaScript isn’t really a language. They often say its just something kids like to play with. And some talk about JavaScript with so much passion that I feel they love JS more than their wives. Interestingly, I could see a pattern emerging out of all these discussions.&nbsp;</span><br><span style=\"font-family: inherit;\"><br>  </span><br><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.animationinsider.com/wp-content/uploads/2012/08/yoda.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"180\" src=\"http://www.animationinsider.com/wp-content/uploads/2012/08/yoda.jpg\" width=\"320\"></span></a></div><span style=\"font-family: inherit;\"><br><br>A JavaScript conqueror has to go through 4 phases to accept the language.</span><br><span style=\"font-family: inherit;\"><br><br><br><br></span><br><span style=\"font-family: inherit;\"><b><br></b><b><br></b><b>1. Ignorance:&nbsp;</b></span><br><a href=\"http://rlv.zcache.co.uk/whatever_guy_meme_postkarte-r5217bc183c3f455cbb761c86cdcae236_vgbaq_8byvr_512.jpg?bg=0xffffff\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://rlv.zcache.co.uk/whatever_guy_meme_postkarte-r5217bc183c3f455cbb761c86cdcae236_vgbaq_8byvr_512.jpg?bg=0xffffff\" width=\"200\"></span></a><br><span style=\"font-family: inherit;\"><br></span><br><span style=\"font-family: inherit;\">Typical sentiments - Who cares about JavaScript ? Do people actually code it in ? OMG! what the hell world has come to.&nbsp;<b>Real</b>&nbsp;programmers code in Java, So I’m just gonna learn java.</span><br><span style=\"font-family: inherit;\"><b><br></b><b><br></b><b><br></b><b>2. Hatred:</b></span><br><div class=\"\" style=\"clear: both; text-align: left;\"><a href=\"http://ragecollection.com/img/ragefaces/y-u-no.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em; text-align: left;\" target=\"_blank\" rel=\"external\"></a><span style=\"font-family: inherit;\"><br></span><br><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://i3.kym-cdn.com/entries/icons/original/000/004/006/y-u-no-guy.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i3.kym-cdn.com/entries/icons/original/000/004/006/y-u-no-guy.jpg\" width=\"196\"></span></a></div><span style=\"font-family: inherit;\"><br><br>Then comes a project requirement asking developers to learn JavaScript.&nbsp;</span><br><span style=\"font-family: inherit;\"><br>Typical sentiments - Why are you making me do this ?</span><br><span style=\"font-family: inherit;\"><br></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><a href=\"http://i1.kym-cdn.com/photos/images/original/000/232/114/e39.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i1.kym-cdn.com/photos/images/original/000/232/114/e39.png\" width=\"192\"></span></a><span style=\"font-family: inherit;\"><br><br>After coding for a while in JavaScript developers usually fall prey to JavaScript gotchas. And hatred grows even more! <br><br>Typical sentiments - No, I’m never going touch JavaScript again, the hell with this project and this company!</span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><b><span style=\"font-family: inherit;\">3. Acceptance:</span></b></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">Finally folks understand that JS isn’t going anywhere. Then comes zen moment in JavaScript. If you’re in this phase, just step back from computer and think about meaning of life. Why JS exists.</span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.all-hd-wallpapers.com/wallpapers/nature/379332.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"250\" src=\"http://www.all-hd-wallpapers.com/wallpapers/nature/379332.jpg\" width=\"400\"></span></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><span style=\"font-family: inherit;\"><br></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><b><span style=\"font-family: inherit;\">4. Realization:</span></b></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">After you’ve hit the zen moment, then comes realization of beauty and simplicity of JavaScript, you get introduced to awesome frameworks like <a href=\"http://www.angularjs.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">Angularjs</span></a>, <a href=\"http://backbonejs.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">Backbone</span></a>, <a href=\"http://www.jaydata.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">jaydata</span></a>. tools like <a href=\"http://gruntjs.com/\" target=\"_blank\"><span style=\"color: #0b5394;\">grunt</span></a>, <a href=\"https://github.com/bower/bower\" target=\"_blank\"><span style=\"color: #0b5394;\">bower </span></a>and JavaScript becomes your beloved language!</span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://i1165.photobucket.com/albums/q593/seiferalmercy/yes-you-can-meme.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\" target=\"_blank\" rel=\"external\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i1165.photobucket.com/albums/q593/seiferalmercy/yes-you-can-meme.jpg\" width=\"320\"></span></a></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\"><br></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">And remember, this is just the&nbsp;beginning!&nbsp;</span></div></div></div>\n","source":"_posts/life-cycle-of-javascript-adaption.md","raw":"---\nlayout: post\ntitle: \"Adaption of JavaScript\"\ndate: 2013-10-01T11:13:00+05:30\ncomments: false\ncategories:\n - javascript\n - learning javascript\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">It's funny how people react to JavaScript, some get excited, some get terrified, while some start crying. In recent past, I've seen many folks arguing that JavaScript isn't really a language. They often say its just something kids like to play with. And some talk about JavaScript with so much passion that I feel they love JS more than their wives. Interestingly, I could see a pattern emerging out of all these discussions.&nbsp;</span><br /><span style=\"font-family: inherit;\"><br />  </span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.animationinsider.com/wp-content/uploads/2012/08/yoda.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"180\" src=\"http://www.animationinsider.com/wp-content/uploads/2012/08/yoda.jpg\" width=\"320\" /></span></a></div><span style=\"font-family: inherit;\"><br /><br />A JavaScript conqueror has to go through 4 phases to accept the language.</span><br /><span style=\"font-family: inherit;\"><br /><br /><br /><br /></span><br /><span style=\"font-family: inherit;\"><b><br /></b><b><br /></b><b>1. Ignorance:&nbsp;</b></span><br /><a href=\"http://rlv.zcache.co.uk/whatever_guy_meme_postkarte-r5217bc183c3f455cbb761c86cdcae236_vgbaq_8byvr_512.jpg?bg=0xffffff\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://rlv.zcache.co.uk/whatever_guy_meme_postkarte-r5217bc183c3f455cbb761c86cdcae236_vgbaq_8byvr_512.jpg?bg=0xffffff\" width=\"200\" /></span></a><br /><span style=\"font-family: inherit;\"><br /></span><br /><span style=\"font-family: inherit;\">Typical sentiments - Who cares about JavaScript ? Do people actually code it in ? OMG! what the hell world has come to.&nbsp;<b>Real</b>&nbsp;programmers code in Java, So I'm just gonna learn java.</span><br /><span style=\"font-family: inherit;\"><b><br /></b><b><br /></b><b><br /></b><b>2. Hatred:</b></span><br /><div class=\"\" style=\"clear: both; text-align: left;\"><a href=\"http://ragecollection.com/img/ragefaces/y-u-no.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em; text-align: left;\"></a><span style=\"font-family: inherit;\"><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://i3.kym-cdn.com/entries/icons/original/000/004/006/y-u-no-guy.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i3.kym-cdn.com/entries/icons/original/000/004/006/y-u-no-guy.jpg\" width=\"196\" /></span></a></div><span style=\"font-family: inherit;\"><br /><br />Then comes a project requirement asking developers to learn JavaScript.&nbsp;</span><br /><span style=\"font-family: inherit;\"><br />Typical sentiments - Why are you making me do this ?</span><br /><span style=\"font-family: inherit;\"><br /></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><a href=\"http://i1.kym-cdn.com/photos/images/original/000/232/114/e39.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i1.kym-cdn.com/photos/images/original/000/232/114/e39.png\" width=\"192\" /></span></a><span style=\"font-family: inherit;\"><br /><br />After coding for a while in JavaScript developers usually fall prey to JavaScript gotchas. And hatred grows even more! <br /><br />Typical sentiments - No, I'm never going touch JavaScript again, the hell with this project and this company!</span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><b><span style=\"font-family: inherit;\">3. Acceptance:</span></b></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">Finally folks understand that JS isn't going anywhere. Then comes zen moment in JavaScript. If you're in this phase, just step back from computer and think about meaning of life. Why JS exists.</span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.all-hd-wallpapers.com/wallpapers/nature/379332.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"250\" src=\"http://www.all-hd-wallpapers.com/wallpapers/nature/379332.jpg\" width=\"400\" /></span></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><span style=\"font-family: inherit;\"><br /></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><b><span style=\"font-family: inherit;\">4. Realization:</span></b></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">After you've hit the zen moment, then comes realization of beauty and simplicity of JavaScript, you get introduced to awesome frameworks like <a href=\"http://www.angularjs.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">Angularjs</span></a>, <a href=\"http://backbonejs.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">Backbone</span></a>, <a href=\"http://www.jaydata.org/\" target=\"_blank\"><span style=\"color: #0b5394;\">jaydata</span></a>. tools like <a href=\"http://gruntjs.com/\" target=\"_blank\"><span style=\"color: #0b5394;\">grunt</span></a>, <a href=\"https://github.com/bower/bower\" target=\"_blank\"><span style=\"color: #0b5394;\">bower </span></a>and JavaScript becomes your beloved language!</span></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://i1165.photobucket.com/albums/q593/seiferalmercy/yes-you-can-meme.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><span style=\"font-family: inherit;\"><img border=\"0\" height=\"200\" src=\"http://i1165.photobucket.com/albums/q593/seiferalmercy/yes-you-can-meme.jpg\" width=\"320\" /></span></a></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\"><br /></span></div><div class=\"separator\" style=\"clear: both; text-align: left;\"><span style=\"font-family: inherit;\">And remember, this is just the&nbsp;beginning!&nbsp;</span></div></div></div>\n","slug":"life-cycle-of-javascript-adaption","updated":1390228892000,"excerpt":"","_id":"c3a4sgeknuk64khp","tags":[],"photos":[],"link":""},{"layout":"post","title":"SOA and life","date":1383154020000,"comments":false,"categories":["d960uksxvbjyw1or","ngxxn6yi0fqmtu8g"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">It’s amazing how principles and styles from software world map directly to day-to-day events. Let it be core OOP concepts such as abstraction, inheritance, polymorphism or design patterns such as singleton, MVC, MVVM, Observer and so on, one can always track the origin of these entities back to different aspects of human society.</span></div><div><span style=\"font-family: inherit;\"><br></span></div><div><span style=\"font-family: inherit;\">For those who don’t know <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>&nbsp;- service oriented architecture. It basically means derivation and integration :). &nbsp;In this post, instead of getting into the details of SOA I would like to highlight how SOA relates to real life. so let’s get to it!</span><br><span style=\"font-family: inherit;\"><br>In SOA, typically the&nbsp;solution&nbsp;is divided into different services which are exposed as HTTP endpoints to other services. They can interact with each other as well as with outside world in some cases. Now in real life, consider your&nbsp;solution to be an organization-<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>. </i>Like any organization,&nbsp;<span style=\"color: #666666;\">MyCompany Inc</span> will divide&nbsp;responsibilities among various groups: there will be a sales team, a marketing team, a production team, a finance and a legal team. Pretty standard, eh? - correct.&nbsp;</span><br><span style=\"font-family: inherit;\"><br>Now comes the interesting part, even though all these teams are headed by the same management folks or C-class executives so to speak, they often interact with each other and with higher management, so what makes this interaction possible ? emails ? - you can’t possibly go wrong with this answer! but if you consider these transactions from a software point of view, the term would be “A Data Contract”! Two teams can understand each other only if both of them are agreed upon the same data contract! just like SOA!</span><br><span style=\"font-family: inherit;\"><br>Next, by splitting the entire organization into small focused teams&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span>&nbsp;can achieve separation of concerns,&nbsp;each team is focused on doing ONE thing, and ONE thing only. This helps people working on the team to align themselves with the goal of team as a whole, and we do exactly the same for SOA! Each service stands for a purpose, to achieve one small thing the right way.</span><br><span style=\"font-family: inherit;\"><br>Now the diversity, it very unlikely that&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>&nbsp;</i>will have&nbsp;each team with same background, ethnicity, culture, language or even continent for that matter! Also for functioning of the team, each of them requires a specialized setup. Sales guys can probably live with a slow PC, but production guys can’t. Yet despite all the differences,&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>&nbsp;</i>has to function somehow, right ? so how SOA is similar here ?, As each service is an individual component, each service can have its own environment, from underlying language to production server, every piece can be customized.</span><br><span style=\"font-family: inherit;\"><br>Just to sum it up, understanding the way SOA relates to life gives you a much more comprehensive approach for analyzing pros and cons of this architectural style.</span></div></div></div>\n","source":"_posts/soa-and-life.md","raw":"---\nlayout: post\ntitle: \"SOA and life\"\ndate: 2013-10-30T15:57:00+05:30\ncomments: false\ncategories:\n - Service oriented architecture\n - SOA\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">It's amazing how principles and styles from software world map directly to day-to-day events. Let it be core OOP concepts such as abstraction, inheritance, polymorphism or design patterns such as singleton, MVC, MVVM, Observer and so on, one can always track the origin of these entities back to different aspects of human society.</span></div><div><span style=\"font-family: inherit;\"><br /></span></div><div><span style=\"font-family: inherit;\">For those who don't know <a href=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\" target=\"_blank\">SOA</a>&nbsp;- service oriented architecture. It basically means derivation and integration :). &nbsp;In this post, instead of getting into the details of SOA I would like to highlight how SOA relates to real life. so let's get to it!</span><br /><span style=\"font-family: inherit;\"><br />In SOA, typically the&nbsp;solution&nbsp;is divided into different services which are exposed as HTTP endpoints to other services. They can interact with each other as well as with outside world in some cases. Now in real life, consider your&nbsp;solution to be an organization-<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>. </i>Like any organization,&nbsp;<span style=\"color: #666666;\">MyCompany Inc</span> will divide&nbsp;responsibilities among various groups: there will be a sales team, a marketing team, a production team, a finance and a legal team. Pretty standard, eh? - correct.&nbsp;</span><br /><span style=\"font-family: inherit;\"><br />Now comes the interesting part, even though all these teams are headed by the same management folks or C-class executives so to speak, they often interact with each other and with higher management, so what makes this interaction possible ? emails ? - you can't possibly go wrong with this answer! but if you consider these transactions from a software point of view, the term would be \"A Data Contract\"! Two teams can understand each other only if both of them are agreed upon the same data contract! just like SOA!</span><br /><span style=\"font-family: inherit;\"><br />Next, by splitting the entire organization into small focused teams&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span>&nbsp;can achieve separation of concerns,&nbsp;each team is focused on doing ONE thing, and ONE thing only. This helps people working on the team to align themselves with the goal of team as a whole, and we do exactly the same for SOA! Each service stands for a purpose, to achieve one small thing the right way.</span><br /><span style=\"font-family: inherit;\"><br />Now the diversity, it very unlikely that&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>&nbsp;</i>will have&nbsp;each team with same background, ethnicity, culture, language or even continent for that matter! Also for functioning of the team, each of them requires a specialized setup. Sales guys can probably live with a slow PC, but production guys can't. Yet despite all the differences,&nbsp;<span style=\"color: #444444;\">MyCompany&nbsp;</span><span style=\"color: #444444;\">Inc</span><i>&nbsp;</i>has to function somehow, right ? so how SOA is similar here ?, As each service is an individual component, each service can have its own environment, from underlying language to production server, every piece can be customized.</span><br /><span style=\"font-family: inherit;\"><br />Just to sum it up, understanding the way SOA relates to life gives you a much more comprehensive approach for analyzing pros and cons of this architectural style.</span></div></div></div>\n","slug":"soa-and-life","updated":1390228892000,"excerpt":"","_id":"jsocyr7oxj2i98v9","tags":[],"photos":[],"link":""},{"layout":"post","title":"Where the puck is going to be ?","date":1384212780000,"comments":false,"categories":["ywirm7crf56xoecd","n77iidqzbdepdawg"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">Since the dawn of mankind,&nbsp;the question:&nbsp;now what ?, &nbsp;has been troubling us a lot. So you have finished a task, achieved a milestone, accomplished a goal, now what ? Do you stop there or thrive for more ?</span><br><span style=\"font-family: inherit;\"><br>This question&nbsp;relates to progress of software projects in a much more philosophical way. If we consider the typical software development life cycle, it always starts with a finite set of problems. Starting from todo list applications to complex solutions, the beginning is always from a finite set of problems which goes on evolving as you develop. And at each step, creator of software has to take a moment and think where all of this is going ? It is safe to assume that processes like <a href=\"http://en.wikipedia.org/wiki/Agile_software_development\" target=\"_blank\">agile</a>, <a href=\"http://en.wikipedia.org/wiki/Iterative_and_incremental_development\" target=\"_blank\">iterative and incremental</a> software development have emerged from the same phenomena. To give software creators more room in order to analyse how software is taking shape.</span><br><span style=\"font-family: inherit;\"><br>An awesome quote by&nbsp;<a href=\"http://en.wikipedia.org/wiki/Wayne_Gretzky\" target=\"_blank\">Wayne Gretzky</a>: <b>I skate to where the puck is going to be, not where it has been</b>. In software world, this quote tells us how to comprehend the question of&nbsp;now what.<i>&nbsp;</i>For example, you just came up with a great idea, but someone else has already implemented it! what do you do ? do you stop there ? or try to figure out how to make it better ? If you’re thinking in this direction, you’re already on right track! Figuring out how to make the world a better place to live in, always leads to something interesting.</span><br><span style=\"font-family: inherit;\"><br>Its insanely important to&nbsp;keep asking for the next big thing, the next mind blowing feature you’re going to deliver, in this exact process lies the root of innovation. Lot of folks talk about innovation, but none of them tell you the crux of it! Innovation isn’t necessarily something out of the box or something you’ve never seen before, but a simple twist in our mundane life. <b>Innovation is a lifestyle, not a goal</b>, it’s a mindset one has to live in.</span><br><span style=\"font-family: inherit;\"><br>Software and innovation have to be intertwined together. While writing software, developer always has to keep thinking about how to make his solution more appealing, more enchanted. The magic touch his solution is going provide to this world. And all of this comes from the question we started with, now what ?</span></div></div>\n","source":"_posts/where-puck-is-going-to-be.md","raw":"---\nlayout: post\ntitle: \"Where the puck is going to be ?\"\ndate: 2013-11-11T21:03:00+05:30\ncomments: false\ncategories:\n - software\n - innovation\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">Since the dawn of mankind,&nbsp;the question:&nbsp;now what ?, &nbsp;has been troubling us a lot. So you have finished a task, achieved a milestone, accomplished a goal, now what ? Do you stop there or thrive for more ?</span><br /><span style=\"font-family: inherit;\"><br />This question&nbsp;relates to progress of software projects in a much more philosophical way. If we consider the typical software development life cycle, it always starts with a finite set of problems. Starting from todo list applications to complex solutions, the beginning is always from a finite set of problems which goes on evolving as you develop. And at each step, creator of software has to take a moment and think where all of this is going ? It is safe to assume that processes like <a href=\"http://en.wikipedia.org/wiki/Agile_software_development\" target=\"_blank\">agile</a>, <a href=\"http://en.wikipedia.org/wiki/Iterative_and_incremental_development\" target=\"_blank\">iterative and incremental</a> software development have emerged from the same phenomena. To give software creators more room in order to analyse how software is taking shape.</span><br /><span style=\"font-family: inherit;\"><br />An awesome quote by&nbsp;<a href=\"http://en.wikipedia.org/wiki/Wayne_Gretzky\" target=\"_blank\">Wayne Gretzky</a>: <b>I skate to where the puck is going to be, not where it has been</b>. In software world, this quote tells us how to comprehend the question of&nbsp;now what.<i>&nbsp;</i>For example, you just came up with a great idea, but someone else has already implemented it! what do you do ? do you stop there ? or try to figure out how to make it better ? If you're thinking in this direction, you're already on right track! Figuring out how to make the world a better place to live in, always leads to something interesting.</span><br /><span style=\"font-family: inherit;\"><br />Its insanely important to&nbsp;keep asking for the next big thing, the next mind blowing feature you're going to deliver, in this exact process lies the root of innovation. Lot of folks talk about innovation, but none of them tell you the crux of it! Innovation isn't necessarily something out of the box or something you've never seen before, but a simple twist in our mundane life. <b>Innovation is a lifestyle, not a goal</b>, it's a mindset one has to live in.</span><br /><span style=\"font-family: inherit;\"><br />Software and innovation have to be intertwined together. While writing software, developer always has to keep thinking about how to make his solution more appealing, more enchanted. The magic touch his solution is going provide to this world. And all of this comes from the question we started with, now what ?</span></div></div>\n","slug":"where-puck-is-going-to-be","updated":1390228892000,"excerpt":"","_id":"4inmnhy33n1hus8x","tags":[],"photos":[],"link":""},{"layout":"post","title":"A thousand thoughts","date":1384871640000,"comments":true,"categories":["flsaeeabctnbz3f1","6ue6moqj875jand0","pdr5gbvczjlant9k"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">The expression “a thousand thoughts running in my head” is very common to hear. We even experience it often when under extreme stress, may it be exams, an important meeting or any other crucial event in life. Eyes start jumbling, vision sometimes becomes blur, and typically before finishing the first thought, the next one pops up!<br><div><br></div><div>Now comes the interesting question, can we make sense out of it ? I believe we can. We can relate this situation to the concept of <a href=\"http://en.wikipedia.org/wiki/Multithreading_(computer_architecture)\" target=\"_blank\">multi threading</a>. Brain is a phenomenal organ, the processing capacity of brain is just unmatched. But considering pattern of thoughts that emerge, one can think of this situation as in when processor is computing multiple threads simultaneously. So how does the processor make sense out of all these threads ? answer would be “by maintaining states!”</div><div><br></div><div>So how&nbsp;one&nbsp;can maintain states of his thoughts ? Personally, I prefer following these steps:</div><div><br></div><div><b>1. Get a writing tool</b></div><div>Let it be rough pen and paper, notes application in smart phone or a whiteboard with markers! Its very important to achieve this first step as soon as possible. Cause brain is not going to stop! So get yourself something to write to on.</div><div><br></div><div><b>2. Starting jotting down high level ideas</b></div><div>The best way to identify high level ideas is by trying to remember everything flashed in your mind in last 5-10 minutes. Anything that pops up within first 40-50 seconds are the ones you’re looking for! Remember: every minute is crucial. These high level thoughts will be headlines. Leave nice and large blank space below each of these.</div><div><br></div><div><b>3. Take a look at each one of them individually and try to figure out details!</b></div><div>Once high level thoughts are sorted out, it’s time to think about details, think about examples, possible implications, and any other detail you might feel important. Remember: don’t forget to note down these! You can abbreviate heavily if you want. Just make sure you would understand it later.</div><div><br></div><div><b>4. Try to link the them</b></div><div>There’s a high probability that the thoughts will be interrelated, by one or the other way. Once all the details are in front of you, they will help take better decisions.&nbsp;</div><div><br></div><div><b>5. Identify action items</b></div><div>Once you have performed all the steps above, think in terms of identifying short term action items for you. By identifying action items, you can plan better!</div><blockquote class=\"tr_bq\">Thinking is not enough, one must act</blockquote>In my experience, some of the coolest ideas have come up while I was under stress, and the question how do I make sense out of it was pending since many days. Finally, I’ve come up with a solution that works in my case, and not only following this process gives me pleasure of being productive it also helps reduce the stress! See if helps you too!</div></div>\n","source":"_posts/a-thousand-thoughts.md","raw":"---\nlayout: post\ntitle: \"A thousand thoughts\"\ndate: 2013-11-19T12:04:00+05:30\ncomments: true\ncategories:\n - thoughts\n - thougthprocess\n - multithreading\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">The expression \"a thousand thoughts running in my head\" is very common to hear. We even experience it often when under extreme stress, may it be exams, an important meeting or any other crucial event in life. Eyes start jumbling, vision sometimes becomes blur, and typically before finishing the first thought, the next one pops up!<br /><div><br /></div><div>Now comes the interesting question, can we make sense out of it ? I believe we can. We can relate this situation to the concept of <a href=\"http://en.wikipedia.org/wiki/Multithreading_(computer_architecture)\" target=\"_blank\">multi threading</a>. Brain is a phenomenal organ, the processing capacity of brain is just unmatched. But considering pattern of thoughts that emerge, one can think of this situation as in when processor is computing multiple threads simultaneously. So how does the processor make sense out of all these threads ? answer would be \"by maintaining states!\"</div><div><br /></div><div>So how&nbsp;one&nbsp;can maintain states of his thoughts ? Personally, I prefer following these steps:</div><div><br /></div><div><b>1. Get a writing tool</b></div><div>Let it be rough pen and paper, notes application in smart phone or a whiteboard with markers! Its very important to achieve this first step as soon as possible. Cause brain is not going to stop! So get yourself something to write to on.</div><div><br /></div><div><b>2. Starting jotting down high level ideas</b></div><div>The best way to identify high level ideas is by trying to remember everything flashed in your mind in last 5-10 minutes. Anything that pops up within first 40-50 seconds are the ones you're looking for! Remember: every minute is crucial. These high level thoughts will be headlines. Leave nice and large blank space below each of these.</div><div><br /></div><div><b>3. Take a look at each one of them individually and try to figure out details!</b></div><div>Once high level thoughts are sorted out, it's time to think about details, think about examples, possible implications, and any other detail you might feel important. Remember: don't forget to note down these! You can abbreviate heavily if you want. Just make sure you would understand it later.</div><div><br /></div><div><b>4. Try to link the them</b></div><div>There's a high probability that the thoughts will be interrelated, by one or the other way. Once all the details are in front of you, they will help take better decisions.&nbsp;</div><div><br /></div><div><b>5. Identify action items</b></div><div>Once you have performed all the steps above, think in terms of identifying short term action items for you. By identifying action items, you can plan better!</div><blockquote class=\"tr_bq\">Thinking is not enough, one must act</blockquote>In my experience, some of the coolest ideas have come up while I was under stress, and the question how do I make sense out of it was pending since many days. Finally, I've come up with a solution that works in my case, and not only following this process gives me pleasure of being productive it also helps reduce the stress! See if helps you too!</div></div>\n","slug":"a-thousand-thoughts","updated":1390228892000,"excerpt":"","_id":"ix373s7b747xz31p","tags":[],"photos":[],"link":""},{"layout":"post","title":"Beauty of closure in JavaScript","date":1380317280000,"comments":false,"categories":["fdg7s9k53q23ni2p","777ifchddoa5mfnm"],"content":"<div class=\"post\"><br><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">Closure is one of the good parts in JavaScript. Its an amazing way to enable access of local variables from parent function scope, irrespective of the context in which function was invoked. Wait, Instead of getting into jargon about closure, let me just illustrate with a few examples.</span><br><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Problem statement:</b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">Write a function which will take a digit as input and output verbal representation of the same.</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Solution 1:</b></span></div><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">var numberMapping = [‘zero’,’one’,’two’,’three’,’four’,’five’,’six’,’seven’,’eight’,’nine’];<br>function getNumber(number) {<br>&nbsp;&nbsp;&nbsp; return numberMapping[number] ? numberMapping[number] : ‘Inavlid input’;<br>}<br><br>// getNumber(1)<br>// “one”</span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// getNumber(12)</span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// “Invalid input”</span><br><span style=\"font-family: inherit;\"><br style=\"color: navy;\">Lets try to analyze this, we have a global array which holds verbal representation of all digits, and then we’re using this array to return corresponding output of given number. Problem with this approach is, numberMapping array is just dangling in global namespace, means&nbsp;it could be modified&nbsp;anywhere in code. And ofcourse, if modified it will give incorrect result. So this approach is bad. In JavaScript always try to avoid global variables to the extent possible. Also this might create a problem in minification as most of the minifiers tend to change the variable names to shorter versions.</span><br><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Solution 2:</b></span></div><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">function getNumber(number) {</span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; var numberMapping = [‘zero’,’one’,’two’,’three’,’four’,’five’,’six’,’seven’,’eight’,’nine’];</span><br><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy;\">&nbsp;&nbsp;</span><span style=\"color: navy;\">&nbsp; return numberMapping[number] ? numberMapping[number] : ‘Inavlid input’;</span></span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">}</span><br><span style=\"font-family: Courier New, Courier, monospace;\"><br><span style=\"color: navy;\">// getNumber(1)<br>// “one”</span></span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// getNumber(12)</span><br><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// “Invalid input”</span><br><span style=\"font-family: inherit;\"><br>Oh! so we just take the variable inside getNumber function making it local. It works fine and solves the problem we faced in solution 1. But this still isn’t the best approach. Because every time getNumber is called, numberMapping array will be initialized and memory will be allocated to it. So this is nice but not the optimum solution.</span><br><span style=\"font-family: inherit;\"><br></span><br><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Time to use closure:</b></span></div><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy; font-size: 12px;\">var getNumber = (function() {</span><br> <span style=\"color: navy;\">&nbsp; &nbsp; var numberMapping = [‘zero’,’one’,’two’,’three’,’four’,’five’,’six’,’seven’,’eight’,’nine’];</span><br> <span style=\"color: navy;\">&nbsp; &nbsp; return function (number) {</span><br> <span style=\"color: navy;\">&nbsp;&nbsp;</span><span style=\"color: navy;\">&nbsp; &nbsp; &nbsp; return numberMapping[number] ? numberMapping[number] : ‘Inavlid input’;</span><br> &nbsp; &nbsp; }<br> <span style=\"color: navy;\">})();</span></span><br><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy;\">// getNumber(1)<br>// “one”</span><br><span style=\"color: navy;\">// getNumber(12)</span><br style=\"color: navy;\"><span style=\"color: navy;\">// “Invalid input”</span></span><br><span style=\"font-family: inherit;\"><br>OK, so this looks a bit complex. What we’re doing here is executing an anonymous function and storing the returned value in a variable named getNumber. In this particular case we’re returning a function. And yes, we can do this in JavaScript! This approach solves the problem we faced in solution 1 by encapsulating numberMapping array. Also as the upper function will only be executed once, hence numberMapping array won’t be initialized every time we call getNumber. And the inner function has access to numberMapping variable because of the beauty of closure!</span><br><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> To sum it up:</b></span></div><span style=\"font-family: inherit;\">This approach is helpful in many conditions, the most common one is while trying to write object oriented code in JavaScript. using ‘prototype’ or ‘this’ for creating classes does not really fit in overall code ethics of JavaScript. if you use ‘this’ or ‘prototype’ for creating classes, implementing singleton class is not an option. Whereas if you use closure you can use the same style of coding throughout the code base. Using closure in javascript definitely helps in writing beautiful code.</span><br><span style=\"font-family: inherit;\"><br></span><span style=\"font-family: Courier New, Courier, monospace;\"><br></span></div></div></div>\n","source":"_posts/beauty-of-closure-in-javascript.md","raw":"---\nlayout: post\ntitle: \"Beauty of closure in JavaScript\"\ndate: 2013-09-27T19:58:00+05:30\ncomments: false\ncategories:\n - javascript\n - closure\n---\n\n<div class='post'>\n<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: inherit;\">Closure is one of the good parts in JavaScript. Its an amazing way to enable access of local variables from parent function scope, irrespective of the context in which function was invoked. Wait, Instead of getting into jargon about closure, let me just illustrate with a few examples.</span><br /><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Problem statement:</b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">Write a function which will take a digit as input and output verbal representation of the same.</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b>Solution 1:</b></span></div><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">var numberMapping = ['zero','one','two','three','four','five','six','seven','eight','nine'];<br />function getNumber(number) {<br />&nbsp;&nbsp;&nbsp; return numberMapping[number] ? numberMapping[number] : 'Inavlid input';<br />}<br /><br />// getNumber(1)<br />// \"one\"</span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// getNumber(12)</span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// \"Invalid input\"</span><br /><span style=\"font-family: inherit;\"><br style=\"color: navy;\" />Lets try to analyze this, we have a global array which holds verbal representation of all digits, and then we're using this array to return corresponding output of given number. Problem with this approach is, numberMapping array is just dangling in global namespace, means&nbsp;it could be modified&nbsp;anywhere in code. And ofcourse, if modified it will give incorrect result. So this approach is bad. In JavaScript always try to avoid global variables to the extent possible. Also this might create a problem in minification as most of the minifiers tend to change the variable names to shorter versions.</span><br /><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Solution 2:</b></span></div><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">function getNumber(number) {</span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">&nbsp; &nbsp; var numberMapping = ['zero','one','two','three','four','five','six','seven','eight','nine'];</span><br /><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy;\">&nbsp;&nbsp;</span><span style=\"color: navy;\">&nbsp; return numberMapping[number] ? numberMapping[number] : 'Inavlid input';</span></span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">}</span><br /><span style=\"font-family: Courier New, Courier, monospace;\"><br /><span style=\"color: navy;\">// getNumber(1)<br />// \"one\"</span></span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// getNumber(12)</span><br /><span style=\"color: navy; font-family: Courier New, Courier, monospace;\">// \"Invalid input\"</span><br /><span style=\"font-family: inherit;\"><br />Oh! so we just take the variable inside getNumber function making it local. It works fine and solves the problem we faced in solution 1. But this still isn't the best approach. Because every time getNumber is called, numberMapping array will be initialized and memory will be allocated to it. So this is nice but not the optimum solution.</span><br /><span style=\"font-family: inherit;\"><br /></span><br /><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> Time to use closure:</b></span></div><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy; font-size: 12px;\">var getNumber = (function() {</span><br /> <span style=\"color: navy;\">&nbsp; &nbsp; var numberMapping = ['zero','one','two','three','four','five','six','seven','eight','nine'];</span><br /> <span style=\"color: navy;\">&nbsp; &nbsp; return function (number) {</span><br /> <span style=\"color: navy;\">&nbsp;&nbsp;</span><span style=\"color: navy;\">&nbsp; &nbsp; &nbsp; return numberMapping[number] ? numberMapping[number] : 'Inavlid input';</span><br /> &nbsp; &nbsp; }<br /> <span style=\"color: navy;\">})();</span></span><br /><span style=\"font-family: Courier New, Courier, monospace;\"><span style=\"color: navy;\">// getNumber(1)<br />// \"one\"</span><br /><span style=\"color: navy;\">// getNumber(12)</span><br style=\"color: navy;\" /><span style=\"color: navy;\">// \"Invalid input\"</span></span><br /><span style=\"font-family: inherit;\"><br />OK, so this looks a bit complex. What we're doing here is executing an anonymous function and storing the returned value in a variable named getNumber. In this particular case we're returning a function. And yes, we can do this in JavaScript! This approach solves the problem we faced in solution 1 by encapsulating numberMapping array. Also as the upper function will only be executed once, hence numberMapping array won't be initialized every time we call getNumber. And the inner function has access to numberMapping variable because of the beauty of closure!</span><br /><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b><br /></b></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><b> To sum it up:</b></span></div><span style=\"font-family: inherit;\">This approach is helpful in many conditions, the most common one is while trying to write object oriented code in JavaScript. using 'prototype' or 'this' for creating classes does not really fit in overall code ethics of JavaScript. if you use 'this' or 'prototype' for creating classes, implementing singleton class is not an option. Whereas if you use closure you can use the same style of coding throughout the code base. Using closure in javascript definitely helps in writing beautiful code.</span><br /><span style=\"font-family: inherit;\"><br /></span><span style=\"font-family: Courier New, Courier, monospace;\"><br /></span></div></div></div>\n","slug":"beauty-of-closure-in-javascript","updated":1390228892000,"excerpt":"","_id":"n5sozhigd09a11vs","tags":[],"photos":[],"link":""},{"title":"Arbitrary Reasons","date":1408770228000,"tags":[],"content":"<p>Very often I see people with some arbitrary conceptions. May it be the language war, or adaption to a new technology. It does make me wonder why people behave this way. I have been trying to figure this out for quite some time now, and, thus far, I have been able to make some observations based on the interactions I have had.</p>\n<h1 id=\"The_farmville_theory\">The farmville theory</h1>\n<p>There was a time when people were crazy about farmville, my facebook inbox was literally filled with farmville requests. It was so bad that I had to eventually block all the notifications from that application. However, this incident sparked an interest on why people are so crazy about farmville. One theory is, farmville could be sending notification without user’s knowledge. Other theory and the more interesting one, is people want to show off their progress in farmville to their friends.</p>\n<p>Dissecting this situation led me to two conclusions. First, people feel just because they spend time in some activity, it must be important. As a consequence, when someone puts money in farmville (an arbitrary in-app purchase), the feeling of importance boosts up. Second, self satisfaction is not enough. As humans are community creatures, they need appreciation from peers.</p>\n<h1 id=\"False_pattern_recognition\">False pattern recognition</h1>\n<p>This one turns out to be one of the classic mistakes people make. Our brains are wired up to make sense out of incomplete and partial data. Pattern recognition is a two way sword, it is the prime reason why humans are at top in foodchain, but false pattern recognition always takes us to a de-tour from facts and real world truth.</p>\n<p>This ultimately leads to flawed reasoning. This situation could be related to certain situations in technical world, such as yo! raising a funding of $1M. Nothing personal in this case, but it is funny when folks come up with arbitrary reasons to support their work.</p>\n<p>I am a big of the awesome series cosmos. I would like to quote three rules it puts forth in the very first episode.</p>\n<ol>\n<li>Test ideas by experiment, take the ones that pass, reject the ones that don’t</li>\n<li>Take the evidence wherever it leads, and</li>\n<li>Question everything.</li>\n</ol>\n<p>I feel reasoning should be based on tangible evidence. By following above rules, there is a high chance you might end with good reasoning!</p>\n","source":"_posts/arbitrary-reasons.md","raw":"---\ntitle: Arbitrary reasons\ndate: 2014-08-22 22:03:48\ntags:\n---\n\nVery often I see people with some arbitrary conceptions. May it be the language war, or adaption to a new technology. It does make me wonder why people behave this way. I have been trying to figure this out for quite some time now, and, thus far, I have been able to make some observations based on the interactions I have had.\n\n# The farmville theory\nThere was a time when people were crazy about farmville, my facebook inbox was literally filled with farmville requests. It was so bad that I had to eventually block all the notifications from that application. However, this incident sparked an interest on why people are so crazy about farmville. One theory is, farmville could be sending notification without user's knowledge. Other theory and the more interesting one, is people want to show off their progress in farmville to their friends.\n\nDissecting this situation led me to two conclusions. First, people feel just because they spend time in some activity, it must be important. As a consequence, when someone puts money in farmville (an arbitrary in-app purchase), the feeling of importance boosts up. Second, self satisfaction is not enough. As humans are community creatures, they need appreciation from peers.\n\n# False pattern recognition\nThis one turns out to be one of the classic mistakes people make. Our brains are wired up to make sense out of incomplete and partial data. Pattern recognition is a two way sword, it is the prime reason why humans are at top in foodchain, but false pattern recognition always takes us to a de-tour from facts and real world truth.\n\nThis ultimately leads to flawed reasoning. This situation could be related to certain situations in technical world, such as yo! raising a funding of $1M. Nothing personal in this case, but it is funny when folks come up with arbitrary reasons to support their work.\n\nI am a big of the awesome series cosmos. I would like to quote three rules it puts forth in the very first episode.\n\n1. Test ideas by experiment, take the ones that pass, reject the ones that don't\n2. Take the evidence wherever it leads, and\n3. Question everything.\n\nI feel reasoning should be based on tangible evidence. By following above rules, there is a high chance you might end with good reasoning!","slug":"arbitrary-reasons","updated":1409427262000,"excerpt":"","_id":"gn7dq7yloxqqtuxd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Herds on a Mountain Slope","date":1408997208000,"tags":[],"content":"<p>Humans are competitive creatures, we always like to move forward in life. Comparing self progress with others is one way to keep the competitive spirit alive, other is to compare self progress. The comparison of self progress usually is with respect to time and position. Over the years, I observed that each year I think I slightly improved myself as compared to last year. This happens almost always, if I do forward interpolation of this thought; I realize that even though I am better than last year, I am stil preparing myself for the next one. In other words, I am better than last year but probably not as much I would be the year next.</p>\n<p>Other observation I made is everyone has role models, and these role models also have their role models. This chain keeps on going, it may or may not be circular, but chain keeps on going. Simply put, at each point in time, almost every determined person has a place where he wants to be and where he currently is with respect to time. Considering the betterment of a being as upward progress, we can imagine the entire human community split in herds and standing on mountain slope. The herds above your position are where you want move eventually and herds below you is where you have been.</p>\n","source":"_posts/herds-on-a-mountain-slope.md","raw":"---\ntitle: herds on a mountain slope\ndate: 2014-08-25 13:06:48\ntags:\n---\n\nHumans are competitive creatures, we always like to move forward in life. Comparing self progress with others is one way to keep the competitive spirit alive, other is to compare self progress. The comparison of self progress usually is with respect to time and position. Over the years, I observed that each year I think I slightly improved myself as compared to last year. This happens almost always, if I do forward interpolation of this thought; I realize that even though I am better than last year, I am stil preparing myself for the next one. In other words, I am better than last year but probably not as much I would be the year next.\n\nOther observation I made is everyone has role models, and these role models also have their role models. This chain keeps on going, it may or may not be circular, but chain keeps on going. Simply put, at each point in time, almost every determined person has a place where he wants to be and where he currently is with respect to time. Considering the betterment of a being as upward progress, we can imagine the entire human community split in herds and standing on mountain slope. The herds above your position are where you want move eventually and herds below you is where you have been.","slug":"herds-on-a-mountain-slope","updated":1408992569000,"excerpt":"","_id":"zw88d0q0ja81wi12","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Adapting to Changes","date":1409164104000,"tags":[],"content":"<p>Change is the inevitable part of life. No matter what you do, situations around you are destined to change. Change can be perceived as good or bad depending upon the situation. I love this quote, it simply outlines how short-lived your plans could be, eventually resulting in change of situations.</p>\n<blockquote>\n<p>Environment eats your plans for breakfast</p>\n</blockquote>\n<p>Once you realize that change is inevitable, you should start looking for ways to best adapt to it. In my personal experience, I follow these guidelines while dealing with change.</p>\n<p><strong>Change is neutral, no hard feelings</strong><br>Attaching sentiment to a change will take away the evaluation part of the process. I personally believe categorizing change is okay, but letting it affect your behavior is bad. </p>\n<p><strong>Change is inevitable, plan for it</strong><br>If you think hard and boil down your plans, they will always come down to two alternatives; desirable and not desirable. Change might impose a switch of tracks. So be prepared for it.</p>\n<p><strong>Focus on the next thing, what had to happen, has happened.</strong><br>Dwelling too much on the past often distorts the ability to think straight. An individual has to be practical while perceiving changes in life. Life is only gonna go forward, so better focus on it.</p>\n<p>This set of guidelines is bound to evolve with time. If there are any other factors you can imagine, suggestions are most welcome :)</p>\n","source":"_posts/adapting-to-changes.md","raw":"---\ntitle: adapting to changes\ndate: 2014-08-27 11:28:24\ntags:\n---\n\nChange is the inevitable part of life. No matter what you do, situations around you are destined to change. Change can be perceived as good or bad depending upon the situation. I love this quote, it simply outlines how short-lived your plans could be, eventually resulting in change of situations.\n\n>Environment eats your plans for breakfast\n\nOnce you realize that change is inevitable, you should start looking for ways to best adapt to it. In my personal experience, I follow these guidelines while dealing with change.\n\n**Change is neutral, no hard feelings**\nAttaching sentiment to a change will take away the evaluation part of the process. I personally believe categorizing change is okay, but letting it affect your behavior is bad. \n\n**Change is inevitable, plan for it**\nIf you think hard and boil down your plans, they will always come down to two alternatives; desirable and not desirable. Change might impose a switch of tracks. So be prepared for it.\n\n**Focus on the next thing, what had to happen, has happened.**\nDwelling too much on the past often distorts the ability to think straight. An individual has to be practical while perceiving changes in life. Life is only gonna go forward, so better focus on it.\n\nThis set of guidelines is bound to evolve with time. If there are any other factors you can imagine, suggestions are most welcome :)","slug":"adapting-to-changes","updated":1409427463000,"excerpt":"","_id":"f1p4h3by3moezo6w","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Passion and Pragmatism","date":1413422158000,"tags":["3pflyhclksfs1c89","acqqh8tedqg0owqh","5owrnqjoztkg96wm"],"content":"<p>In the world of startups, passion is considered as the most important quality of founders. I wondered for long time, why passion is so important? Why can’t someone be just good at what they do and figure out the rest? I thought the most important thing was to earn money. Coming from India where most of the business is software services, I saw making money is essentially putting more people on the project. Where does passion come in into this situation? Can you really be passionate about increasing the team size? Hire more people? Without understanding what their roles and functions are? That did not make much sense to me. So I dug deep, If companies in India are founded by the sole purpose of making money, why on earth someone would care if you are passionate about it or not? After coming to Silicon Valley I noticed many people talking their jaws off about passion. Any random act of writing code is coupled with passion, even if a programmer writes a program that adds two integers and nothing else, he must have done it passion. Now this situation was even more mysterious and confusing for me.</p>\n<p>I could not see the any reasoning in putting passion first for literaly everything. I thought of it as another Silicon Valley idiosyncrasy. Afterwards, I got the opportunity to meet folks who are doing startups on a regular basis. Without a doubt, these guys were extremely passionate about their products. Everyone of them was so convinced that their product is going to change the world, they forgot the simple fact that 90% of companies in silicon valley fail. Now things got even more interesting at this point. Everyone is passionate, everyone loves their product, then why people can’t build great companies? If everyone loves their product so much and everyone here is passionate about their product, why can’t everyone succeed? Isn’t passion the most important thing? I tried to understand this reasoning for a while. One answer that might be probable is, if the company failed, founders were not passionate enough. This sounds like pure bullshit to me, I feel passion is binary, either you are passionate about something or you are not. End of story.</p>\n<p>Bewildered with this situation, I started thinking that there must be some parameter I am missing. Continuing my search on how to build great companies, I came across the concept of lean startup. The principles on which lean startup focus on reflect one simple fact - Practicality. This struck me as the most important aspect in day to day happenings in life. Pragmatism is probably the most desired skill, one has to be practical in his personal and professional life. Similarly, in startups it is important to focus on what is right more than on what you’re passionate about, and practicality is a tool to get there. It is extremely common to be passionate about the wrong idea, and lean startup methodologies teach us how to practically determine vital components of starting a company and shaping ideas. However, pragmatism alone is not sufficient. Pragmatism fails to be the fuel that will drive founder’s vision. It is extremely hard to start and build a company from idea. And passion is the thing that will keep you going. Coupled with passion, pragmatism can make a huge impact.</p>\n","source":"_posts/Passion-and-pragmatism.md","raw":"title: Passion and pragmatism\ndate: 2014-10-15 18:15:58\ntags: \n  - startups \n  - passion \n  - pragmatism\n---\n\nIn the world of startups, passion is considered as the most important quality of founders. I wondered for long time, why passion is so important? Why can't someone be just good at what they do and figure out the rest? I thought the most important thing was to earn money. Coming from India where most of the business is software services, I saw making money is essentially putting more people on the project. Where does passion come in into this situation? Can you really be passionate about increasing the team size? Hire more people? Without understanding what their roles and functions are? That did not make much sense to me. So I dug deep, If companies in India are founded by the sole purpose of making money, why on earth someone would care if you are passionate about it or not? After coming to Silicon Valley I noticed many people talking their jaws off about passion. Any random act of writing code is coupled with passion, even if a programmer writes a program that adds two integers and nothing else, he must have done it passion. Now this situation was even more mysterious and confusing for me.\n\nI could not see the any reasoning in putting passion first for literaly everything. I thought of it as another Silicon Valley idiosyncrasy. Afterwards, I got the opportunity to meet folks who are doing startups on a regular basis. Without a doubt, these guys were extremely passionate about their products. Everyone of them was so convinced that their product is going to change the world, they forgot the simple fact that 90% of companies in silicon valley fail. Now things got even more interesting at this point. Everyone is passionate, everyone loves their product, then why people can't build great companies? If everyone loves their product so much and everyone here is passionate about their product, why can't everyone succeed? Isn't passion the most important thing? I tried to understand this reasoning for a while. One answer that might be probable is, if the company failed, founders were not passionate enough. This sounds like pure bullshit to me, I feel passion is binary, either you are passionate about something or you are not. End of story.\n\nBewildered with this situation, I started thinking that there must be some parameter I am missing. Continuing my search on how to build great companies, I came across the concept of lean startup. The principles on which lean startup focus on reflect one simple fact - Practicality. This struck me as the most important aspect in day to day happenings in life. Pragmatism is probably the most desired skill, one has to be practical in his personal and professional life. Similarly, in startups it is important to focus on what is right more than on what you're passionate about, and practicality is a tool to get there. It is extremely common to be passionate about the wrong idea, and lean startup methodologies teach us how to practically determine vital components of starting a company and shaping ideas. However, pragmatism alone is not sufficient. Pragmatism fails to be the fuel that will drive founder's vision. It is extremely hard to start and build a company from idea. And passion is the thing that will keep you going. Coupled with passion, pragmatism can make a huge impact.","slug":"Passion-and-pragmatism","updated":1413574298000,"excerpt":"","_id":"exy7y3b3htsnynkr","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Getting Started With Machine Learning","date":1413765843000,"tags":["fcw1nkyp307amh5q","a4g0q1q6bw7i0x8y","oeosndz7p6xv9r5x"],"content":"<p>Machine learning is without a doubt the most interesting field I have come across so far. However, I found it extremely difficult to get started with the basic concepts of machine learning without spending hours and hours scrolling through world wide web. Coming from a web development background, I found it hard to get started with statistics, probability and other concepts related with machine learning. In this post, I will try and list resources that helped me and might help someone else in similar situation. </p>\n<h1 id=\"Courses\">Courses</h1>\n<ul>\n<li><p><strong>Andrew Ng’s coursera course</strong> - <a href=\"https://www.coursera.org/course/ml\" target=\"_blank\" rel=\"external\">coursera</a><br>If you haven’t heard of this course yet, just go ahead and take it.<br>This course provides a broad introduction to machine learning, datamining, and statistical pattern recognition.</p>\n</li>\n<li><p><strong>Andrew Ng’s stanford course CS 229</strong> - <a href=\"https://www.youtube.com/watch?v=UzxYlbK2c7E&amp;list=PLA89DCFA6ADACE599\" target=\"_blank\" rel=\"external\">youtube</a><br>This is a much detailed version than the coursera course.<br>This course provides a broad introduction to machine learning and statistical pattern recognition. Topics include supervised learning, unsupervised learning, learning theory, reinforcement learning and adaptive control. Recent applications of machine learning, such as to robotic control, data mining, autonomous navigation, bioinformatics, speech recognition, and text and web data processing are also discussed.</p>\n</li>\n<li><p><strong>Machine learning course CS 156 by Yaser Abu-Mostafa</strong> - <a href=\"https://www.youtube.com/watch?v=mbyG85GZ0PI&amp;list=PLD63A284B7615313A\" target=\"_blank\" rel=\"external\">youtube</a><br>This course helps clear many basic concepts. Also, I liked the presentation by Yaser Abu-Mostafa!<br>This is an introductory course by Caltech Professor Yaser Abu-Mostafa on machine learning that covers the basic theory, algorithms, and applications. </p>\n</li>\n<li><p><strong>Probabilistic graphical models</strong> - <a href=\"https://www.coursera.org/course/pgm\" target=\"_blank\" rel=\"external\">coursera</a><br>A bit advanced course, but worth taking.<br>In this class, you will learn the basics of the PGM representation and how to construct them, using both human knowledge and machine learning techniques.</p>\n</li>\n<li><p><strong>In-depth introduction to machine learning</strong> - <a href=\"http://www.r-bloggers.com/in-depth-introduction-to-machine-learning-in-15-hours-of-expert-videos/\" target=\"_blank\" rel=\"external\">r-bloggers</a><br>Awesome introduction, This lecture series is provided stanford professors Dr. Hastie and Dr. Tibshirani.</p>\n</li>\n<li><p><strong>Mathematical Biostatistics Boot Camp 1</strong> - <a href=\"https://www.coursera.org/course/biostats\" target=\"_blank\" rel=\"external\">coursera</a><br>This class helps refresh basics of mathematics.<br>Topics include probability, random variables, distributions, expectations, variances, independence, conditional probabilities, likelihood and some basic inferences based on confidence intervals.</p>\n</li>\n</ul>\n<h1 id=\"Web_resources\">Web resources</h1>\n<ul>\n<li><p><a href=\"http://machinelearningmastery.com/start-here/\" target=\"_blank\" rel=\"external\">Machine learning mastery</a><br>A compilation of steps to get started, extremely helpful for beginners</p>\n</li>\n<li><p><a href=\"https://www.kaggle.com/\" target=\"_blank\" rel=\"external\">kaggle</a>, The Home of Data Science<br>Only name is sufficient - The Home of Data Science</p>\n</li>\n<li><p><a href=\"http://www.datatau.com/\" target=\"_blank\" rel=\"external\">DataTau</a><br>Hackernews for data scientists</p>\n</li>\n<li><p><a href=\"http://archive.ics.uci.edu/ml/datasets.html\" target=\"_blank\" rel=\"external\">UCI machine learning repository</a><br>Machine learning needs data, UCI give you data.</p>\n</li>\n</ul>\n<h1 id=\"Language\">Language</h1>\n<p>Even though language is more of a personal choice, machine learning algorithms are hard to implement in every language out there. Thus, some languages are favoured by ML community. Primary languages used as per <a href=\"http://blog.kaggle.com/2011/11/27/kagglers-favorite-tools/\" target=\"_blank\" rel=\"external\">kaggle</a>, and <a href=\"http://machinelearningmastery.com/best-programming-language-for-machine-learning/\" target=\"_blank\" rel=\"external\">ML mastery</a> are R, matlab and python. I personally prefer python, because it nicely fits in web stack. But R and matlab are surely great tools as well.</p>\n<p>For python lovers, <a href=\"http://www.scipy.org/\" target=\"_blank\" rel=\"external\">SciPy</a> is a place to go. In case you’re new to python, I recommend learning the language first. </p>\n<p>For learning R, there are loads of videos on YouTube. As a beginner in R, it is hard to find one that works for you. I found <a href=\"https://www.youtube.com/playlist?list=PLqzoL9-eJTNBDdKgJgJzaQcY6OXmsXAHU\" target=\"_blank\" rel=\"external\">R Programming Tutorials</a> by MarinStatsLectures quite helpful.</p>\n<p>Thank you for reading and I hope this has been an informative post.</p>\n","source":"_posts/Getting-started-with-machine-learning.md","raw":"title: Getting started with machine learning\ndate: 2014-10-19 17:44:03\ntags:\n  - Machine learning\n  - Statistics\n  - Probability\n---\n\nMachine learning is without a doubt the most interesting field I have come across so far. However, I found it extremely difficult to get started with the basic concepts of machine learning without spending hours and hours scrolling through world wide web. Coming from a web development background, I found it hard to get started with statistics, probability and other concepts related with machine learning. In this post, I will try and list resources that helped me and might help someone else in similar situation. \n\n#Courses\n- **Andrew Ng's coursera course** - [coursera](https://www.coursera.org/course/ml)\nIf you haven't heard of this course yet, just go ahead and take it.\nThis course provides a broad introduction to machine learning, datamining, and statistical pattern recognition.\n\n- **Andrew Ng's stanford course CS 229** - [youtube](https://www.youtube.com/watch?v=UzxYlbK2c7E&list=PLA89DCFA6ADACE599)\nThis is a much detailed version than the coursera course.\nThis course provides a broad introduction to machine learning and statistical pattern recognition. Topics include supervised learning, unsupervised learning, learning theory, reinforcement learning and adaptive control. Recent applications of machine learning, such as to robotic control, data mining, autonomous navigation, bioinformatics, speech recognition, and text and web data processing are also discussed.\n\n- **Machine learning course CS 156 by Yaser Abu-Mostafa** - [youtube](https://www.youtube.com/watch?v=mbyG85GZ0PI&list=PLD63A284B7615313A)\nThis course helps clear many basic concepts. Also, I liked the presentation by Yaser Abu-Mostafa!\nThis is an introductory course by Caltech Professor Yaser Abu-Mostafa on machine learning that covers the basic theory, algorithms, and applications. \n\n- **Probabilistic graphical models** - [coursera](https://www.coursera.org/course/pgm)\nA bit advanced course, but worth taking.\nIn this class, you will learn the basics of the PGM representation and how to construct them, using both human knowledge and machine learning techniques.\n\n- **In-depth introduction to machine learning** - [r-bloggers](http://www.r-bloggers.com/in-depth-introduction-to-machine-learning-in-15-hours-of-expert-videos/)\nAwesome introduction, This lecture series is provided stanford professors Dr. Hastie and Dr. Tibshirani.\n\n- **Mathematical Biostatistics Boot Camp 1** - [coursera](https://www.coursera.org/course/biostats)\nThis class helps refresh basics of mathematics. \nTopics include probability, random variables, distributions, expectations, variances, independence, conditional probabilities, likelihood and some basic inferences based on confidence intervals.\n\n#Web resources\n- [Machine learning mastery](http://machinelearningmastery.com/start-here/)\nA compilation of steps to get started, extremely helpful for beginners\n\n- [kaggle](https://www.kaggle.com/), The Home of Data Science\nOnly name is sufficient - The Home of Data Science\n\n- [DataTau](http://www.datatau.com/)\nHackernews for data scientists\n\n- [UCI machine learning repository](http://archive.ics.uci.edu/ml/datasets.html)\nMachine learning needs data, UCI give you data.\n\n#Language\nEven though language is more of a personal choice, machine learning algorithms are hard to implement in every language out there. Thus, some languages are favoured by ML community. Primary languages used as per [kaggle](http://blog.kaggle.com/2011/11/27/kagglers-favorite-tools/), and [ML mastery](http://machinelearningmastery.com/best-programming-language-for-machine-learning/) are R, matlab and python. I personally prefer python, because it nicely fits in web stack. But R and matlab are surely great tools as well.\n\nFor python lovers, [SciPy](http://www.scipy.org/) is a place to go. In case you're new to python, I recommend learning the language first. \n\nFor learning R, there are loads of videos on YouTube. As a beginner in R, it is hard to find one that works for you. I found [R Programming Tutorials](https://www.youtube.com/playlist?list=PLqzoL9-eJTNBDdKgJgJzaQcY6OXmsXAHU) by MarinStatsLectures quite helpful.\n\nThank you for reading and I hope this has been an informative post.","slug":"Getting-started-with-machine-learning","updated":1413770411000,"excerpt":"","_id":"a0lyy9rz8ehdbnw0","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Moving From Python to R","date":1415901005000,"tags":["0xjt4jj2rovlzmtv","e1zediwtohq1eiqo","awou0c4ynzepzlui"],"content":"<p>Its been 3 months since I started with machine learning. Coming from a web development background, my first choice of tool for performing data analysis was python. Primary reason why I chose python was the familiarity with language. But soon enough I started to realize its not an optimal environment for data analytics. Because my programming background heavily influenced my workflow, I kept shuffling across multiple tools; terminal for running the script, sublime for writing python code and matplotlib chart viewers for visualizing the data. I wanted a better workflow to work with data. A workflow that will allow me to easily try out different visualizations, navigate through data without writing much code and keep a history of operations I performed.</p>\n<p>Since I knew R is the most used programming language for data science, I decided to give it a try. I downloaded R distribution from the <a href=\"http://www.r-project.org/\" target=\"_blank\" rel=\"external\">website</a>. I started by executing some commands on the terminal, initial impressions were good. However, I could not find more efficient way to explore the data than earlier. Then I came across <a href=\"http://www.rstudio.com/\" target=\"_blank\" rel=\"external\">RStudio</a>. RStudio is awesome. It allowed me pin down all points of interest within a single window. It shows me plots, help for R functions, data explorer and simplitstic editor for writing code. I loved the way I could execute commands on RConsole and see the output immediately on the plots tab. This allowed me to keep iterating quickly. Later, I started learning more about the language. RStudio also shows the help for functions in R, it has been the most useful feature for me. I’m discovering more and more as I learn about the language and ecosystem of packages. But as of now, R is definitely a way to go for my machine learning explorations.</p>\n","source":"_posts/Moving-from-python-to-R.md","raw":"title: Moving from python to R\ndate: 2014-11-13 09:50:05\ntags:\n  - DataScience\n  - R\n  - python\n---\n\nIts been 3 months since I started with machine learning. Coming from a web development background, my first choice of tool for performing data analysis was python. Primary reason why I chose python was the familiarity with language. But soon enough I started to realize its not an optimal environment for data analytics. Because my programming background heavily influenced my workflow, I kept shuffling across multiple tools; terminal for running the script, sublime for writing python code and matplotlib chart viewers for visualizing the data. I wanted a better workflow to work with data. A workflow that will allow me to easily try out different visualizations, navigate through data without writing much code and keep a history of operations I performed.\n\nSince I knew R is the most used programming language for data science, I decided to give it a try. I downloaded R distribution from the [website](http://www.r-project.org/). I started by executing some commands on the terminal, initial impressions were good. However, I could not find more efficient way to explore the data than earlier. Then I came across [RStudio](http://www.rstudio.com/). RStudio is awesome. It allowed me pin down all points of interest within a single window. It shows me plots, help for R functions, data explorer and simplitstic editor for writing code. I loved the way I could execute commands on RConsole and see the output immediately on the plots tab. This allowed me to keep iterating quickly. Later, I started learning more about the language. RStudio also shows the help for functions in R, it has been the most useful feature for me. I'm discovering more and more as I learn about the language and ecosystem of packages. But as of now, R is definitely a way to go for my machine learning explorations.","slug":"Moving-from-python-to-R","updated":1415902411000,"excerpt":"","_id":"36czsdqrd2ncsk19","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"startups, passion, pragmatism","_id":"r2tnnt1wx4uf53ev","posts":[]},{"name":"startups passion pragmatism","_id":"3c8ic7nx6d14qqbn","posts":[]},{"name":"startups","_id":"3pflyhclksfs1c89","posts":["exy7y3b3htsnynkr"]},{"name":"passion","_id":"acqqh8tedqg0owqh","posts":["exy7y3b3htsnynkr"]},{"name":"pragmatism","_id":"5owrnqjoztkg96wm","posts":["exy7y3b3htsnynkr"]},{"name":"Machine learning","_id":"fcw1nkyp307amh5q","posts":["a0lyy9rz8ehdbnw0"]},{"name":"Statistics","_id":"a4g0q1q6bw7i0x8y","posts":["a0lyy9rz8ehdbnw0"]},{"name":"Probability","_id":"oeosndz7p6xv9r5x","posts":["a0lyy9rz8ehdbnw0"]},{"name":"Data science","_id":"2n9urku7qzsvmtck","posts":[]},{"name":"R","_id":"e1zediwtohq1eiqo","posts":["36czsdqrd2ncsk19"]},{"name":"python","_id":"awou0c4ynzepzlui","posts":["36czsdqrd2ncsk19"]},{"name":"DataScience","_id":"0xjt4jj2rovlzmtv","posts":["36czsdqrd2ncsk19"]}]}